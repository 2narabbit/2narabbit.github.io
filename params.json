{
  "name": "2narabbit.GitHub.io",
  "tagline": "1장 - 오브젝트와 의존관계",
  "body": "# 초난감 DAO\r\n사용자 정보를 JDBC API를 통해 DB에 저장하고 조회할 수 있는 간단한 DAO를 하나 구현해보자\r\n\r\n## User\r\n    public class User {\r\n        String id;\r\n        String name;\r\n        String password;\r\n\r\n        public String getId() {\r\n            return id;\r\n        }\r\n\r\n        public String getName() {\r\n            return name;\r\n        }\r\n\r\n        public String getPassword() {\r\n            return password;\r\n        }\r\n\r\n        public void setId(String id) {\r\n            this.id = id;\r\n        }\r\n\r\n        public void setName(String name) {\r\n            this.name = name;\r\n        }\r\n\r\n        public void setPassword(String password) {\r\n            this.password = password;\r\n        }\r\n    }\r\n사용자 정보를 저장하기위해 자바빈 규약을 따르는 오브젝트를 이용\r\n> 자바빈?\r\n> 다음 두가지 관례를 따라 만들어진 오브젝트를 의미하며 간단히 빈이라고 부르기도함\r\n> * 디폴트 생성자 \r\n>   - 자바빈은 파라미터가 없는 디폴트 생성자를 가져야함\r\n>   - 툴이나 프레임워크에서 리플렉션을 이용해 오브젝트를 생성하기 때문 ---> 리플렉션?\r\n> * 프로퍼티\r\n>    - 자바빈이 노출하는 이름을 가진 속성을 의미\r\n>    - 프로퍼티는 set으로 시작하는 수정자 메소드(setter)와 get으로 시작하는 접근자 메소드(getter)를 이용해 수정 또는 조회 가능\r\n\r\n## UserDao\r\n## main()을 이용한 DAO 테스트 코드\r\n# DAO의 분리\r\n# DAO의 확장\r\n# 제어의 역전(IoC)\r\n# 스프링의 IoC\r\n# 싱글톤 레지스트리와 오브젝트 스코프\r\n# 의존관계 주입(DI)\r\n# XML을 이용한 설정",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}