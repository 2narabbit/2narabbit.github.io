---
layout: default
title:  "[토비의 스프링] 4장 - 예외"
date:   2016-12-07 00:00:00
categories: main
---

4장에서는 JdbcTemplate을 대표로 하는 스프링의 데이터 액세스 기능에 담겨 있는 예외처리와 관련된 접근 방법에 대해 알아본다. 이를 통해 예외를 처리하는 베스트 프랙티스도 살펴본다.

# 사라진 SQLException
JdbcContext로 만들었던 코드를 스프링의 JdbcTemplate을 적용하도록 바꾸면서 전과 후의 deleteAll() 메소드를 비교해보고 무엇이 달라졌는지 찾아보자.

```
public void deleteAll() throws SQLException {
	this.jdbcContext.executeSql("delete from users");
}
========================================================================
public void deleteAll() {
	this.jdbcTemplate.update("delete from users");
}
```

JdbcTemplate 적용 이전에는 있었던 throws SQLException 선언이 적용 후에는 사라졌다. 어디로 간 것일까?

## 초난감 예외처리
SQLException이 어디로 갔는지 알아보기 전에 먼저 개발자들의 코드에서 종종 발견되는 초난감 예외처리들을 살펴보자.

### 예외 블랙홀
다음은 초보자들이 만들어낸 JDBC 코드에서 흔히 볼 수 있는 코드다.

```
try {
	...
} catch(SQLException e) {
	// 예외를 잡고는 아무것도 하지 않는다.
}
```

예외가 발생하면 그것을 catch 블록을 써서 잡아내는 것까지는 좋은데, 아무것도 하지 않고 별문제 없는 것처럼 넘어가 버리는 건 정말 위험한 일이다. 원치 않는 예외가 발생하는 것보다도 훨씬 더 나쁜 일이다. 왜냐하면 프로그램 실행 중에 어디선가 오류가 있어서 예외가 발생했는데 그것을 무시하고 계속 진행해버리기 때문이다. 결국 발생한 예외로 인해 어떤 기능이 비정상적으로 동작하거나, 메모리나 리소스가 소진되거나, 예상치 못한 다른 문제를 일으킬 것이다. 더 큰 문제는 그 시스템 오류나 이상한 결과의 원인이 무엇인지 찾아내기가 매우 힘들다는 점이다.

다음과 같은 코드도 마찬가지다.

```
try {
	...
} catch(SQLException e) {
	System.out.println(e);
}
```

```
try {
	...
} catch(SQLException e) {
	e.printStackTrace();
}
```

예외가 발생하면 화면에 출력해주는데 뭐가 문제일까? 개발 중에는 메시지가 눈에 확 띄게 보이니 문제가 생겨도 금방 알아차릴 수 있다. 하지만 운영서버에 올라가면 누군가가 로그를 계속 모니터링하지 않는 한 이 예외 코드는 심각한 폭탄으로 남아 있을 것이다. 예외는 처리돼야 한다.

예외를 처리할 때 반드시 지켜야 할 핵심 원칙은 한 가지다. **모든 예외는 적절하게 복구되든지 아니면 작업을 중단시키고 운영자 또는 개발자에게 분명하게 통보돼야 한다.**

### 무의미하고 무책임한 throws
다음과 같이 메소드 선언에 throws Exception을 기계적으로 붙이는 개발자도 있다.

```
public void method1() throws Exception {
	method2();
}

public void method2() throws Exception {
	method3();
}

public void method3() throws Exception {
	....
}
```

API 등에서 발생하는 예외를 일일이 catch하기도 귀찮고, 별 필요도 없으며 매번 정확하게 예외 이름을 적어서 선언하기도 귀찮으니 아예 모든 예외를 무조건 던져버리는 선언을 모든 메소드에 기계적으로 넣는 것이다. 예외 블랙홀보다는 조금 낫긴 하지만 이런 무책임한 throws 선언도 심각한 문제점이 있다.

자신이 사용하려고 하는 메소드에 throws Exception이 선언되어 있다고 생각해보자. 그런 메소드 선언에서는 의미있는 정보를 얻을 수 없다. 결국 이런 메소드를 사용하는 메소드에서도 역시 throws Exception을 따라서 붙이는 수밖에 없다. 결과적으로 적절한 처리를 통해 복구될 수 있는 예외상황도 제대로 다룰 수 있는 기회를 박탈당한다.

이 두 가지 나쁜 습관은 어떤 경우에도 용납하지 않아야 한다.

## 예외의 종류와 특징
자바에서 throw를 통해 발생시킬 수 있는 예외는 크게 세 가지가 있다.

### Error
첫째는 java.lang.Error 클래스의 서브클래스들이다. 에러는 시스템에 뭔가 비정상적인 상황이 발생했을 경우에 사용된다. 그래서 주로 자바 VM에서 발생시키는 것이고 어플리케이션 코드에서 잡으려고 하면 안 된다. 

시스템 레벨에서 틀별한 작업을 하는 게 아니라면 어플리케이션에서는 이런 에러에 대한 처리는 신경쓰지 않아도 된다.

### Exception과 체크 예외
java.lang.Exception 클래스와 그 서브클래스로 정의되는 예외들은 에러와 달리 개발자들이 만든 어플리케이션 코드의 작업 중에 예외상황이 발생했을 경우에 사용된다.

Exception 클래스는 다시 체크 예외와 언체크 예외로 구분된다. 

![](http://t1.daumcdn.net/section/oc/0ac5bbf05f5a4865b4e0b5bf70593a90)

일반적으로 예외라고 하면 Exception 클래스의 서브클래스 중에서 RuntimeException을 상속하지 않은 것만을 말하는 체크 예외라고 생각해도 된다. 

체크 예외가 발생할 수 있는 메소드를 사용할 경우 반드시 예외를 처리하는 코드를 함께 작성해야 한다. 사용할 메소드가 체크 예외를 던진다면 이를 catch 문으로 잡든지, 아니면 다시 throws를 정의해서 메소드 밖으로 던져야 한다. 그렇지 않으면 컴파일 에러가 발생한다.

### RuntimeException과 언체크/런타임 예외
java.lang.RuntimeException 클래스를 상송한 예외들은 명시적인 예외처리를 강제하지 않기 때문에 언체크 예외라고 불린다. 에러와 마찬가지로 이 런타임 예외는 catch 문으로 잡거나 throws로 선언하지 않아도 된다.

런타임 예외는 주로 프로그램의 오류가 있을 때 발생하도록 의도된 것들이다. 피할 수 있지만 개발자가 부주의해서 발생할 수 있는 경우에 발생하도록 만든 것이 런타임 예외다.

## 예외처리 방법
먼저 예외를 처리하는 일반적인 방법을 살펴보자.

### 예외 복구
첫 번째 예외처리 방법은 예외상황을 파악하고 문제를 해결해서 정상 상태로 돌려놓는 것이다.

예를 들어 사용자가 요청한 파일을 읽으려고 시도했는데 해당 파일이 없거나 문제가 있어 IOException이 발생했다고 생각해보자. 이 때는 사용자에게 상황을 알려주고 다른 파일을 이용하도록 안내해서 예외상황을 해결할 수 있다. 예외로 인해 기본 작업 흐름이 불가능하면 다른 작업 흐름으로 자연스럽게 유도해주는 것이다. 이런 경우 예외상황은 다시 정상으로 돌아오고 예외를 복구했다고 볼 수 있다.

네트워크가 불안해서 가끔 서버에 접속이 잘 안 되는 열악한 환경에 있는 시스템이라면 원격 DB 서버에 접속하다 실패해서 SQLException이 발생하는 경우에 재시도를 해볼 수 있다. 네트워크 접속이 원활하지 않아서 예외가 발생했다면 일정 시간 대기했다가 다시 접속을 시도해보는 방법을 사용해서 예외상황으로부터 복구를 시도할 수 있다.

예외처리 코드를 강제하는 체크 예외들은 이렇게 예외를 어떤 식으로든 복구할 가능성이 있는 경우에 사용한다. API를 사용하는 개발자로 하여금 예외상황이 발생할 수 있음을 인식하도록 도와주고 이에 대한 적절한 처리를 시도해보도록 요구하는 것이다.

### 예외처리 회피
두 번째 방법은 예외처리를 자신이 담당하지 않고 자신을 호출한 쪽으로 던져버리는 것이다. 예외를 자신이 처리하지 않고 회피하는 방법이다.

빈 catch 블록으로 잡아서 예외가 발생하지 않는 것처럼 만드는 경우는 회피한 것이 아니다. 예외처리를 회피하려면 반드시 다른 오브젝트나 메소드가 예외를 대신 처리할 수 있도록 해야한다.

JdbcContext나 JdbcTemplate이 사용하는 콜백 오브젝트는 메소드 선언을 보면 알겠지만 ResultSet이나 PreparedStatement 등을 이용해서 작업하다 발생하는 SQLException을 자신이 처리하지 않고 템플릿으로 던져버린다. SQLException을 처리하는 일은 콜백 오브젝트의 역할이 아니라고 보기 때문이다. 

하지만 콜백과 템플릿처럼 긴밀하게 역할을 분담하고 있는 관계가 아니라면 자신의 코드에서 발생하는 예외를 그냥 던져버리는 건 무책임한 책임회피일 수 있다.

예외를 회피하는 것은 예외를 복구하는 것처럼 의도가 분명해야 한다. 자신을 사용하는 쪽에서 예외를 다루는 게 최선의 방법이라는 분명한 확신이 있어야 한다.

### 예외 전환
마지막으로 예외를 처리하는 방법은 예외 전환을 하는 것이다. 예외 회피와 달리 발생한 예외를 그대로 넘기는 게 아니라 적절한 예외로 전환해서 던진다는 특징이 있다.

예외 전환은 보통 두 가지 목적으로 사용된다.

* 내부에서 발생한 예외를 그대로 던지는 것이 그 예외상황에 대한 적절한 의미를 부여해주지 못하는 경우, 의미를 분명하게 해줄 수 있는 예외로 바꿔주기 위해서
    * eg) 새로운 사용자를 등록하려고 시도했을 때 아이디가 같은 사용자가 있어 SQLException이 발생한 경우 SQLException을 그대로 던지는 것 보단 정보를 해석해서 DuplicateUserIdException 같은 예외로 바꿔서 던져주는 것이 좋다.
* 예외를 처리하기 쉽고 단순하게 만들기 위해 포장
    * 주로 예외처리를 강제하는 체크 예외를 언체크 예외인 런타임 예외로 바꾸는 경우에 사용
	* 일반적으로 체크 예외를 throws를 사용해 넘기는 건 무의미함. 메소드 선언은 지저분해지고 아무런 장점이 없음. DAO에서 발생한 SQLException이 웹 컨트롤러 메소드까지 명시적으로 전달된다고 해서 무슨 소용이 있을까? 어차피 복구가 불가능한 예외라면 가능한 한 빨리 런타임 예외로 포장해 던지게 해서 다른 계층의 메소드를 작성할 때 불필요한 throws 선언이 들어가지 않도록 해주는 것이 좋음
	* 대부분 서버환경에서는 어플리케이션 코드에서 처리하지 않고 전달된 예외들을 일괄적으로 다룰 수 있는 기능을 제공함. 어차피 복구하지 못할 예외라면 어플리케이션 코드에서는 런타임 예외로 포장해서 던져버리고, 예외처리 서비스 등을 이용해 자세한 로그를 남기고, 관리자에게는 메일 등으로 통보해주고, 사용자에게는 친절한 안내 메세지를 보여주는 식으로 처리하는 게 바람직함

## 예외처리 전략
지금까지 살펴본 예외의 종류와 처리 방법 등을 기준으로 일관된 예외처리 전략을 정리해보자.

### 런타임 예외의 보편화
체크 예외처럼 예외처리를 강제하는 것은 예외가 발생할 가능성이 있는 API 메소드를 사용하는 개발자의 실수를 방지하기 위한 배려라고 볼 수도 있겠지만, 실제로는 예외를 제대로 다루고 싶지 않을 만큼 짜증나게 만드는 원인이 되기도 한다.

자바가 처음 만들어질 때 많이 사용되던 애플릿이나 AWT, 스윙을 사용한 독립형 애플리케이션에서는 통제 불가능한 시스템 예외라고 할지라도 애플리케이션의 작업이 중단되지 않게 해주고 상황을 복구해야 했다. 예를 들어 워드의 파일 열기 기능에서 사용자가 입력한 이름에 해당하는 파일을 찾을 수 없다고 애플리케이션이 종료돼버리게 할 수는 없다.

하지만 자바 엔터프라이즈 서버환경은 다르다. 수많은 사용자가 동시에 요청을 보내고 각 요청이 독립적인 작업으로 취급된다. 하나의 요청을 처리하는 중에 예외가 발생하면 해당 작업만 중단시키면 그만이다. 

자바의 환경이 서버로 이동하면서 체크 예외의 활용도와 가치는 점점 떨어지고 있다. 그래서 대응이 불가능한 체크 예외라면 빨리 런타임 예외로 전환해서 던지는 게 낫다.

자바 초기부터 있었던 JDK의 API와 달리 최근에 등장하는 표준 스펙 또는 오픈소스 프레임워크에서는 API가 발생시키는 예외를 체크 예외 대신 언체크 예외로 정의하는 것이 일반화되고 있다. 예전에는 복구할 가능성이 조금이라도 있다면 체크 예외로 만든다고 생각했는데, 지금은 항상 복구할 수 있는 예외가 아니라면 일단 언체크 예외로 만드는 경향이 있다.

### 어플리케이션 예외
런타임 예외 중심의 전략은 굳이 이름을 붙이자면 낙관적인 예외처리 기법이라고 할 수 있다. 일단 복구할 수 있는 예외는 없다고 가정하고 예외가 생겨도 어차피 런타임 예외이므로 시스템 레벨에서 알아서 처리해줄 것이고, 꼭 필요한 경우는 런타임 예외라도 잡아서 복구하거나 대응해줄 수 있으니 문제 될 것이 없다는 낙관적인 태도를 기반으로 하고 있다. 이런 면에서 직접 처리할 수 없는 예외가 대부분이라고 하더라도 혹시 놓치는 예외가 있을 수 있으니, 일단 잡고 보도록 강제하는 체크 예외의 비관적인 접근방법과 대비된다.

반면에 시스템 또는 외부의 예외상황이 원인이 아니라 애플리케이션 자체의 로직에 의해 의도적으로 발생시키고, 반드시 catch 해서 무엇인가 조치를 취하도록 요구하는 예외도 있다. 이런 예외들을 일반적으로 애플리케이션 예외라고 한다.

예를 들어 사용자가 요청한 금액을 은행계좌에서 출금하는 기능을 가진 메소드가 있다고 생각해보자. 당연히 현재 잔고를 확인하고, 허용하는 범위를 넘으면 출금을 중단시키고, 적절한 경고를 사용자에게 보내야 한다. 이런 기능을 담은 메소드를 설계하는 방법이 두 가지 있다.

1. 정상적인 출금을 한 경우와 잔고 부족이 발생한 경우에 각각 다른 종류의 리턴 값을 돌려주는 것
    * 단점 : 예외상황에 대한 리턴 값을 명확하게 코드화하고 잘 관리하지 않으면 혼란이 생김. 또, 결과 값을 확인하는 조건문이 자주 등장하여 코드가 지저분해지고 흐름을 파악하고 이해하기 힘들어짐
2. 정상적인 흐름을 따르는 코드는 그대로 두고, 잔고 부족과 같은 예외상황에서는 비즈니스적인 의미를 띤 예외를 던지도록 만드는 것
    * 이 때 사용하는 예외는 의도적으로 체크 예외로 만듬. 그래서 개발자가 잊지 않고 예외상황에 대한 로직을 구현하도록 강제해줌

## SQLException은 어떻게 됐나?
지금까지 살펴본 예외처리에 관한 내용을 바탕으로, DAO에 존재하는 SQLException에 대해 생각해보자.

SQLException은 과연 복구가 가능한 예외인가? 99% SQLException은 코드 레벨에서는 복구할 방법이 없다. 프로그램의 오류 또는 개발자의 부주의 때문에 발생하는 경우이거나, 통제할 수 없는 외부상황 때문에 발생하는 것이다.

더군다나 DAO 밖에서 SQLException을 다룰 수 있는 가능성은 거의 없다. 따라서 예외처리 전략을 적용해야 한다. 필요도 없는 기계적인 throws 선언이 등장하도록 방치하지 말고 가능한한 빨리 언체크/런타임 예외로 전환해줘야 한다.

스프링의 JdbcTemplate은 바로 이 예외처리 전략을 따르고 있다. JdbcTemplate 템플릿과 콜백 안에서 발생하는 모든 SQLException을 런타임 예외인 DataAccessException으로 포장해서 던져준다. 그래서 DAO 메소드에서 SQLException이 모두 사라진 것이다.

# 예외 전환
예외를 다른 것으로 바꿔서 던지는 예외 전환의 목적은 두 가지라고 했다. 하나는 런타임 예외로 포장해서 굳이 필요하지 않은 catch/throws를 줄여주는 것이고, 다른 하나는 로우레벨의 예외를 좀 더 의미 있고 추상화된 예외로 바꿔서 던져주는 것이다.

## JDBC의 한계
JDBC는 자바를 이용해 DB에 접근하는 방법을 추상화된 API 형태로 정의해놓고, 각 DB업체가 JDBC 표준을 따라 만들어진 드라이버를 제공하게 해준다. 내부구현은 DB마다 다르겠지만 JDBC의 Connection, Statement, ResultSet 등의 표준 인터페이스를 통해 그 기능을 제공해주기 때문에 JDBC API에만 익숙해지면 DB의 종류에 상관없이 일관된 방법으로 프로그램을 개발할 수 있다.

하지만 DB 종류에 상관없이 사용할 수 있는 데이터 액세스 코드를 작성하는 일은 쉽지 않다. 표준화된 JDBC API가 DB 프로그램 개발 방법을 학습하는 부담은 확실히 줄여주지만 DB를 자유롭게 변경해서 사용할 수 있는 유연한 코드를 보장해주지는 못한다. 현실적으로 DB를 자유롭게 바꾸어 사용할 수 있는 DB 프로그램을 작성하는 데는 두 가지 걸림돌이 있다.

### 비표준 SQL
SQL은 어느 정도 표준화된 언어이고 몇 가지 표준 규약이 있지만, 대부분의 DB는 표준을 따르지 않는 비표준 문법과 기능도 제공한다. 비표준 SQL이 DAO 코드에 들어가게 되면 해당 DAO는 특정 DB에 대해 종속적인 코드가 되고 만다. 다른 DB로 변경하려면 DAO에 담긴 SQL을 적지 않게 수정해야 한다.

### 호환성 없는 SQLException의 DB 에러정보
DB를 사용하다가 발생할 수 있는 예외의 원인은 다양하다. 문제는 DB마다 SQL만 다른 것이 아니라 에러의 종류와 원인도 제각각이라는 점이다. 그래서 JDBC는 데이터 처리 중에 발생하는 다양한 예외를 그냥 SQLException 하나에 모두 담아버린다. 예외가 발생한 원인은 SQLException 안에 담긴 에러 코드와 SQL 상태정보를 참조해봐야 한다. 그런데 SQLException의 getErrorCode()로 가져올 수 있는 DB 에러 코드는 DB 별로 모두 다르다. DB 벤더가 정의한 고유한 에러 코드를 사용하기 때문이다.

## DB 에러 코드 매핑을 통한 전환
DB 종류가 바뀌더라도 DAO를 수정하지 않으려면 이 두가지 문제를 해결해야 한다. 먼저 SQLException의 비표준 에러 코드에 대한 해결책을 알아보자.

해결 방법은 DB별 에러 코드를 참고해서 발생한 예외의 원인이 무엇인지 해석해주는 기능을 만드는 것이다. DAO 메소드나 JdbcTemplate등의 코드에서 일일이 DB 별로 에러 코드의 종류를 확인하는 작업을 수행하는 건 부담이 너무 크다. 대신 스프링은 DB별 에러 코드를 분류해서 스프링이 정의한 예외 클래스와 매핑해놓은 에러 코드 매핑정보 테이블을 만들어두고 이를 이용한다.

```
<bean id="Oracle" class="org.springframework.jdbc.support.SQLErrorCodes">
	<property name="badSqlGrammarCodes">  // 예외 클래스 종류
		<value>900,903,904,917</value>    // 매핑되는 DB 에러 코드
	</property>

	<property name="duplicateKeyCodes">
		<value>1</value>
	</property>

	....
</bean>
```

JdbcTemplate은 SQLException을 단지 런타임 예외인 DataAccessException으로 포장하는 것이 아니라 DB의 에러 코드를 DataAccessException 계층 구조의 클래스 중 하나로 매핑해준다. 전환되는 JdbcTemplate에서 던지는 예외는 모두 DataAccessException의 서브클래스 타입이다. 드라이버나 DB 메타정보를 참고해서 DB 종류를 확인하고 DB별로 미리 준비된 매핑정보를 참고해서 적절한 예외 클래스를 선택하기 때문에 DB가 달라져도 같은 종류의 에러라면 동일한 예외를 받을 수 있다.

## DAO 인터페이스와 DataAccessException 계층구조
DataAccessException은 JDBC의 SQLException을 전환하는 용도로만 만들어진 건 아니다. JDBC 외에 자바 데이터 엑세스 기술에서 발생하는 예외에도 적용된다. 자바에는 JDBC 외에도 데이터 액서스를 위한 표준 기술이 존재한다. JDO나 JPA는 JDBC와 마찬가지로 자바의 표준 퍼시스턴스 기술이지만 JDBC와는 성격과 사용 방법이 크게 다르다. 하이버네이트 같이 표준을 따르긴 하지만 독자적인 프로그래밍 모델을 지원하는 ORM 기술도 있다. JDBC를 기반으로 하지만 사용 방법과 발생하는 예외가 다른 iBatis도 있다.

DataAccessException은 의미가 같은 예외라면 데이터 엑세스 기술의 종류와 상관없이 일관된 예외가 발생하도록 만들어준다. 스프링이 왜 이렇게 DataAccessException 계층구조를 이요용해 기술에 독립적인 예외를 정의하고 사용하게 하는지 생각해보자.


### DAO 인터페이스와 구현의 분리
DAO의 사용 기술과 구현 코드는 전략 패턴과 DI를 통해서 DAO를 사용하는 클라이언트에게 감출 수 있지만, 메소드 선언에 나타나는 예외정보가 문제가 될 수 있다. UserDao의 인터페이스를 분리해서 기술에 독립적인 인터페이스로 만들려면 다음과 같이 정의해야 한다.

```
public interface UserDao {
	public void add(User user);
}
```

하지만 위 메소드 선언은 사용할 수 없다. DAO에서 사용하는 데이터 엑세스 기술의 API가 예외를 던지기 때문이다. 만약 JDBC API를 사용한다면 SQLException을 던질 것이다. 따라서 인터페이스 메소드가 다음과 같이 선언돼야 한다.

```
public interface UserDao {
	public void add(User user) throws SQLException;
}
```

이렇게 정의한 인터페이스는 JDBC가 아닌 데이터 액세스 기술로 DAO 구현을 전환하면 사용할 수 없다. 데이터 액세스 기술의 API는 자신만의 독자적인 예외를 던지기 때문이다.

```
public void add(User user) throws PersistentException;    // JPA
public void add(User user) throws HibernateException;     // Hibernate
public void add(User user) throws JdoException;           // JDO
```

결국 인터페이스로 메소드의 구현은 추상화했지만 구현 기술마다 던지는 예외가 다르기 때문에 메소드의 선언이 달라진다는 문제가 발생한다. DAO 인터페이스를 기술에 완전히 독립적으로 만들려면 예외가 일치하지 않는 문제도 해결해야 한다.

### 데이터 엑세스 예외 추상화와 DataAccessException 계층 구조
그래서 스프링은 자바의 다양한 데이터 엑세스 기술을 사용할 때 발생하는 예외들을 추상화해서 DataAccessException 계층구조 안에 정리해놓았다. DataAccessException은 자바의 주요 데이터 액세스 기술에서 발생할 수 있는 대부분의 예외를 추상화하고 있다.

JdbcTemplate과 같이 스프링의 데이터 액세스 지원 기술을 이용해 DAO를 만들면 사용 기술에 독립적인 일관성 있는 예외를 던질 수 있다. 결국 인터페이스 사용, 런타임 예외 전환과 함께 DataAccessException 예외 추상화를 적용하면 데이터 액세스 기술과 구현 방법에 독립적인 이상적인 DAO를 만들 수가 있다.

